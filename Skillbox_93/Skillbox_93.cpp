#include <iostream>
#include <fstream>
#include <string>

using namespace std;

/*Задание 4. Разработка детектора PNG-файла
Что нужно сделать
Разработайте программу, которая получает на вход, в стандартный ввод, путь к файлу. 
На выходе программа должна определить, является ли данный файл PNG-изображением. 
Данная процедура не просто должна смотреть на расширение файла, но и произвести минимальный анализ его внутренностей, 
в бинарном режиме.
Внутренности валидного бинарного файла начинаются со специального 8-байтового заголовка. Нас будут интересовать первые четыре байта. 
Первый байт всегда имеет значение −119 (число со знаком минус), а следующие — это просто символы ‘P’, ‘N’, ‘G’, 
расположенные друг за другом. Обратите внимание, что все они в верхнем регистре.
По результатам проверки пути и внутренностей требуется сообщить пользователю о результате проверки в стандартный вывод.*/

//-----------------------------------------------------------------------------------
bool isPNGImage(const string& filePath)
{

	ifstream file(filePath, ios::binary); // Открываем файл в бинарном режиме

	if (!file.is_open())
	{
		cout << "Ошибка открытия файла." << endl;
		return false;
	}

	// Считываем первые 4 байта
	char header[4];
	file.read(header, sizeof(header));

	// Проверяем, являются ли первые 4 байта корректным заголовком PNG
	bool isPNG = (header[0] == -119 && header[1] == 'P' && header[2] == 'N' && header[3] == 'G');

	file.close();

	return isPNG;
}
//-----------------------------------------------------------------------------------
int main() {
	setlocale(LC_ALL, "ru");

	string filePath;
	cout << "Введите путь к файлу: ";
	getline(cin, filePath);

	if (isPNGImage(filePath)) 
	{
		cout << "Данный файл является PNG-изображением." << endl;
	}
	else 
	{
		cout << "Данный файл не является PNG-изображением." << endl;
	}

	return 0;
}
//-----------------------------------------------------------------------------------