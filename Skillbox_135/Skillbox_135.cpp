#include <iostream>
#include <ctime>
#include <cstdlib>
#include <stdexcept>

using namespace std;

/*Задание 2. Игра по ловле рыбы
Что нужно сделать
Реализуйте простую игру-симуляцию ловли рыбы. Игровое поле представляет собой девять секторов условного пруда. 
В начале игры в одном из этих секторов с помощью генератора случайных чисел оказывается рыба. 
Точно так же, случайным образом, по секторам пруда распределяются и три сапога. 
Сапог и рыба при этом не могут находиться в одном и том же секторе одновременно, 
как и несколько сапог сразу в одном из секторов.
Игрок закидывает удочку с приманкой в один из секторов, номер которого вводится стандартным способом через консоль. 
Задача игрока — угадать сектор, в котором находится рыба и, таким образом, поймать её. 
Если игрок попал на пустой сектор, то удочку надо забросить повторно. Если игрок поймал сапог, 
то игра завершается с отрицательным результатом.
Реализовать задачу нужно с помощью исключений: 
когда успешный заброс удочки генерирует специальное пользовательское исключение, 
после чего программа должна завершиться и оповестить пользователя об успешной рыбалке и количестве попыток, 
которое ему для этого потребовалось. Если же был пойман сапог, то должно выводиться сообщение о неудачной ловле.*/

//---------------------------------------------------------------------------------------------------------------------
class Fish {};
//---------------------------------------------------------------------------------------------------------------------
class Boot {};
//---------------------------------------------------------------------------------------------------------------------
class PondSector 
{
public:
	Fish* fish = nullptr;
	Boot* boot = nullptr;
};
//---------------------------------------------------------------------------------------------------------------------
class FishingGame 
{
public:
	FishingGame() 
	{
		// Инициализация генератора случайных чисел
		srand(time(nullptr));

		// Расположение рыбы в случайном секторе
		field[rand() % 9].fish = new Fish();

		// Расположение трех сапог в случайных секторах
		for (int i = 0; i < 3; ++i)
		{
			int sector;
			do 
			{
				sector = rand() % 9;
			} while (field[sector].fish != nullptr || field[sector].boot != nullptr);
			field[sector].boot = new Boot();
		}
	}

	void castFishingRod(int sector) 
	{
		if (sector < 1 || sector > 9) 
		{
			throw out_of_range("Неверный номер сектора. Введите число от 1 до 9.");
		}

		attempts++;

		PondSector& targetSector = field[sector - 1];

		if (targetSector.fish != nullptr) 
		{
			delete targetSector.fish;
			targetSector.fish = nullptr;
			cout << "Ура! Вы поймали рыбу за " << attempts << " попыток!" << endl;
			throw Fish();
		}
		else if (targetSector.boot != nullptr) 
		{
			cout << "К сожалению, вы поймали сапог. Попробуйте еще раз." << endl;
			throw Boot();
		}
		else 
		{
			cout << "Вы поймали ничего. Попробуйте другой сектор." << endl;
		}
	}

private:
	PondSector field[9];
	int attempts = 0;
};
//---------------------------------------------------------------------------------------------------------------------
int main() 
{
	setlocale(LC_ALL,"ru");

	FishingGame game;

	try 
	{
		int sector;
		while (true) 
		{
			cout << "Введите номер сектора для заброса удочки (от 1 до 9): ";
			cin >> sector;
			game.castFishingRod(sector);
		}
	}
	catch (const Fish&) 
	{
		// Удачная ловля рыбы
	}
	catch (const Boot&) 
	{
		// Пойман сапог
	}
	catch (const exception& e) 
	{
		cerr << "Ошибка: " << e.what() << endl;
		return 1;
	}

	return 0;
}
//---------------------------------------------------------------------------------------------------------------------