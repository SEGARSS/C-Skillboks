#include <iostream>
#include <iomanip>
#include <vector>

using namespace std;

/*Задание 5. Пупырка
После посылки из Китая осталась спецплёнка для бережной перевозки груза — пупырка. Всего в пупырке 12 на 12 шариков-пузырьков. 
Состояние любого пузырька: он либо целый, либо нет, то есть true или false (тип массива — bool). 
Для начала требуется реализовать отдельную функцию инициализации пупырки начальным состоянием: полностью целая пупырка, все элементы true.
Программа заключается в последовательном лопании целых регионов пузырьков. 
Перед каждым таким лопанием надо показывать пользователю полностью всю плёнку: o — это целый пузырёк, x — лопнутый. 
Это тоже надо выделить в отдельную функцию. Итак, как выглядит само лопание. 
Пользователь вводит две координаты: начала региона и конца региона. 
Процедура лопания пузырей должна быть реализована с помощью отдельной функции, все аргументы должны проверяться на валидность, 
что они в в рамках диапазона возможных значений, иначе должна быть выведена ошибка. 
После лопания каждого пузыря, который не был ещё лопнут до того, в консоль должно выводиться сообщение “Pop!”.
Лопание должно продолжаться до последнего пузырька. Как только вся пупырка потрачена, программа заканчивает выполнение. 
Вы можете подсчитать окончание в самой функции по отображению пузырьков плёнки, так как функция выполняется после каждого лопания.*/

const int SIZE = 12;

//------------------------------------------------------------------------------------------------------------------------
void initializeBubbleWrap(vector<vector<bool>>& bubbleWrap) // Метод инициализации пупырки
{
	for (int i = 0; i < SIZE; ++i) 
	{
		for (int j = 0; j < SIZE; ++j) 
		{
			bubbleWrap[i][j] = true;  // Инициализация всех пузырьков как целых
		}
	}
}
//------------------------------------------------------------------------------------------------------------------------
void displayBubbleWrap(const vector<vector<bool>>& bubbleWrap) // Метод отображения состояния пупырки
{
	for (int i = 0; i < SIZE; ++i) 
	{
		for (int j = 0; j < SIZE; ++j) 
		{
			cout << (bubbleWrap[i][j] ? 'o' : 'x') << ' ';  // o - целый пузырек, x - лопнутый
		}
		cout << endl;
	}
}
//------------------------------------------------------------------------------------------------------------------------
void popBubbles(vector<vector<bool>>& bubbleWrap, int startX, int startY, int endX, int endY) // Метод лопания пузырей в указанном регионе
{
	for (int i = startX; i <= endX; ++i) 
	{
		for (int j = startY; j <= endY; ++j) 
		{
			if (bubbleWrap[i][j]) 
			{
				cout << "Pop!" << endl;
				bubbleWrap[i][j] = false;  // Лопаем пузырь
			}
		}
	}
}
//------------------------------------------------------------------------------------------------------------------------
int main()
{
	setlocale(LC_ALL, "ru");

	vector<vector<bool>> bubbleWrap(SIZE, vector<bool>(SIZE, false));

	initializeBubbleWrap(bubbleWrap);

	while (true) 
	{
		displayBubbleWrap(bubbleWrap);

		int startX, startY, endX, endY;
		cout << "Введите координаты лопаемого региона (startX startY endX endY): ";
		cin >> startX >> startY >> endX >> endY;

		// Проверка валидности координат
		if (startX < 0 || startY < 0 || endX >= SIZE || endY >= SIZE || startX > endX || startY > endY) 
		{
			cout << "Ошибка ввода координат. Попробуйте снова." << endl;
			continue;
		}

		// Лопаем пузыри
		popBubbles(bubbleWrap, startX, startY, endX, endY);

		// Проверяем, остались ли целые пузыри
		bool allPopped = true;
		for (int i = 0; i < SIZE; ++i) 
		{
			for (int j = 0; j < SIZE; ++j) 
			{
				if (bubbleWrap[i][j]) 
				{
					allPopped = false;
					break;
				}
			}
			if (!allPopped) 
			{
				break;
			}
		}

		if (allPopped) 
		{
			cout << "Все пузыри лопнуты. Программа завершает выполнение." << endl;
			break;
		}
	}

	return 0;
}
//------------------------------------------------------------------------------------------------------------------------