#include <iostream>
#include <thread>
#include <mutex>
#include <condition_variable>
#include <chrono>
#include <string>

using namespace std;

/*Задание 2. Симуляция работы вокзала
Что нужно сделать
С помощью многопоточности реализуйте простую модель железнодорожного вокзала.
С трёх точек отправления в разное время отбывают три разных поезда с условными обозначениями A, B, C. 
Все они идут на один и тот же вокзал и могут дойти до него в разное время.
На этом целевом вокзале единовременно может находиться только один поезд. 
Остальные поезда должны ждать, пока уже занятое место освободится.
В начале программы пользователь последовательно вводит для каждого поезда время в пути до вокзала (в секундах). 
После этого поезда начинают своё движение за заданное количество времени. 
Как только поезд прибыл на вокзал, он ожидает от пользователя команды depart, которая сигнализирует о его отбытии с вокзала.
По всем событиям (прибытие на вокзал, ожидание свободного места, отбытие с вокзала) 
вместе с условным обозначением поезда выводятся сообщения в консоль.
Программа завершается, когда на вокзале побывают все три поезда.*/

//------------------------------------------------------------------------------------------------------------
mutex mtx;
condition_variable cv;
bool stationOccupied = false;
int trainsArrived = 0;
//------------------------------------------------------------------------------------------------------------
void trainJourney(const string& trainName, int travelTime)
{
	// Ждем указанное время в пути
	this_thread::sleep_for(chrono::seconds(travelTime));

	// Поезд прибыл на вокзал
	cout << "Поезд " << trainName << " прибыл на вокзал." << endl;

	unique_lock<mutex> lock(mtx);
	trainsArrived++;

	// Ждем, пока вокзал освободится
	cv.wait(lock, [] { return !stationOccupied || trainsArrived == 3; });

	// Если вокзал свободен, занимаем его
	if (!stationOccupied) 
	{
		stationOccupied = true;
		cout << "Поезд " << trainName << " занял вокзал." << endl;
	}
	else 
	{
		cout << "Поезд " << trainName << " ждет освобождения вокзала." << endl;
	}

	// Отправляем поезд с вокзала
	this_thread::sleep_for(chrono::seconds(2));
	cout << "Поезд " << trainName << " отправляется с вокзала." << endl;

	// Освобождаем вокзал
	stationOccupied = false;
	cv.notify_all();
}
//------------------------------------------------------------------------------------------------------------
int main() 
{
	setlocale(LC_ALL, "ru");

	int timeA, timeB, timeC;

	// Ввод времени в пути для каждого поезда
	cout << "Введите время в пути для поезда A (в секундах): ";
	cin >> timeA;

	cout << "Введите время в пути для поезда B (в секундах): ";
	cin >> timeB;

	cout << "Введите время в пути для поезда C (в секундах): ";
	cin >> timeC;

	// Запуск потоков для каждого поезда
	thread threadA(trainJourney, "A", timeA);
	thread threadB(trainJourney, "B", timeB);
	thread threadC(trainJourney, "C", timeC);

	// Ожидание завершения работы всех потоков
	threadA.join();
	threadB.join();
	threadC.join();

	return 0;
}
//------------------------------------------------------------------------------------------------------------