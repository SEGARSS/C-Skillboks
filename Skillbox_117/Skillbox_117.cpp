#include <iostream>
#include <vector>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

/*Задание 3. Симуляция работы компании
Что нужно сделать
Реализуйте симуляцию работы компании.
В компании существует вертикальное управление с иерархией.
Есть основные рабочие, подчинённые, разбитые на команды. У каждой команды есть менеджер среднего звена.
Всей компанией руководит глава компании. У всех сотрудников, включая руководителя, есть имена.

Глава компании выполняет стратегическое управление. Он определяет основной вектор движения — задачи верхнего уровня.
Менеджеры среднего звена разбивают эти задачи на подзадачи и раздают их своим подчинённым. Подчинённые выполняют работу.
• Реализация данной логики должна проходить упрощённым образом.
Указания главы компании поступают из стандартного ввода и являются не более чем целочисленными идентификаторами.
• Данные идентификаторы служат зерном для генератора случайных чисел.
Каждый из менеджеров, принимая себе эту целочисленную команду,
добавляет к ней свой порядковый номер и вызывает с результирующей суммой функцию std::srand().
• На основе этой суммы вычисляется общее количество задач,
которое требуется выполнить данной командой, — от 1 до количества работников в группе.
Всего есть три типа задач для работников: A, B и C. Они тоже выбираются случайно и распределяются между незанятыми рабочими.
• При старте программы пользователь указывает в стандартном вводе количество команд и количество работников в каждой из команд.
• Далее пользователь вводит целые числа, которые соответствуют указаниям руководителя компании.
Когда какой-то работник или менеджер получил указания или задачу, об этом сообщается в стандартный вывод,
включая имя работающего сотрудника. Программа завершается, когда все работники заняты какими-то задачами.*/

//---------------------------------------------------------------------------------------------------------
class Worker // Класс для представления сотрудника
{
public:
	// Конструктор
	Worker(const string& name) : name(name) {}

	// Метод для получения имени сотрудника
	string getName() const {
		return name;
	}

	// Метод для выполнения задачи
	void doTask(char taskType) {
		cout << "Сотрудник " << name << " выполняет задачу типа " << taskType << endl;
	}

private:
	string name;
};
//---------------------------------------------------------------------------------------------------------
class Manager // Класс для представления менеджера
{
public:
	// Деструктор для освобождения памяти
	~Manager() 
	{
		for (Worker* worker : workers) 
		{
			delete worker;
		}
	}

	// Конструктор
	Manager(const string& name, int numWorkers) : name(name) 
	{
		// Создаем рабочих и добавляем их к менеджеру
		for (int i = 0; i < numWorkers; ++i) 
		{
			string workerName = name + "'s Worker " + to_string(i + 1);
			workers.push_back(new Worker(workerName));
		}
	}

	// Метод для получения имени менеджера
	string getName() const 
	{
		return name;
	}

	// Метод для получения количества рабочих
	int getNumWorkers() const 
	{
		return workers.size();
	}

	// Метод для выполнения задачи
	void delegateTask(int taskId) 
	{
		int hash = taskId + workers.size(); // Простое смешивание
		srand(hash);
		int tasksCount = rand() % (workers.size() + 1); // Количество задач от 0 до количества работников
		char taskType;

		switch (rand() % 3) 
		{ // Случайно выбираем тип задачи: A, B или C
		case 0: taskType = 'A'; break;
		case 1: taskType = 'B'; break;
		case 2: taskType = 'C'; break;
		}
		for (int i = 0; i < tasksCount; ++i) 
		{
			int workerIndex = rand() % workers.size(); // Случайно выбираем работника
			workers[workerIndex]->doTask(taskType);
		}
	}

private:
	string name;
	vector<Worker*> workers;
};
//---------------------------------------------------------------------------------------------------------
class CEO // Класс для представления главы компании
{
public:
	// Деструктор для освобождения памяти
	~CEO() 
	{
		delete manager;
	}

	// Конструктор
	CEO() 
	{
		manager = new Manager("CEO's Manager", 5); // Создаем менеджера с 5 рабочими
	}

	// Метод для получения имени главы компании
	string getName() const 
	{
		return "CEO";
	}

	// Метод для выполнения задачи
	void assignTask(int taskId) 
	{
		cout << "Глава компании делегирует задачу " << taskId << " менеджеру " << manager->getName() << endl;
		manager->delegateTask(taskId);
	}

private:
	Manager* manager;
};
//---------------------------------------------------------------------------------------------------------
int main() 
{
	setlocale(LC_ALL, "ru");

	int numTeams;
	cout << "Введите количество команд: ";
	cin >> numTeams;

	vector<Manager*> managers;

	// Создаем менеджеров для каждой команды
	for (int i = 0; i < numTeams; ++i) 
	{
		string managerName = "Manager " + to_string(i + 1);
		managers.push_back(new Manager(managerName, 3)); // Каждый менеджер управляет 3 рабочими
	}

	CEO ceo;

	cout << "Введите команды для главы компании (идентификаторы задач): ";
	int taskId;
	while (cin >> taskId) 
	{
		ceo.assignTask(taskId);
	}

	// Освобождаем память
	for (Manager* manager : managers) {
		delete manager;
	}

	return 0;
}
//---------------------------------------------------------------------------------------------------------